name: azure-iot-edge
summary: Extend cloud intelligence and analytics to edge devices
description:
  Azure IoT Edge is a fully managed service that delivers cloud intelligence
  locally by deploying and running artificial intelligence (AI), Azure
  services, and custom logic directly on cross-platform IoT devices. Run your
  IoT solution securely and at scaleâ€”whether in the cloud or offline.


architectures:
  - build-on: armhf
    run-on: armhf
  - build-on: arm64
    run-on: arm64
  - build-on: amd64
    run-on: amd64

grade: stable
confinement: strict
base: core18
adopt-info: iotedge

layout:
  /etc/docker:
    bind: $SNAP_DATA/etc/docker
  /etc/iotedge:
    bind: $SNAP_DATA/etc/iotedge
  /var/lib/iotedge:
    bind: $SNAP_COMMON/var/lib/iotedge
  /var/lib/docker:
    bind: $SNAP_COMMON/var/lib/docker
  /usr/bin/iotedged:
    bind-file: $SNAP/usr/bin/iotedged

plugs:
  home:
    read: all
  docker-support-privileged:
    interface: docker-support
    privileged-containers: true
  docker-cli:
    interface: docker

slots:
  docker-daemon:
    interface: docker

environment:
    LD_LIBRARY_PATH: ${SNAP_LIBRARY_PATH}:${LD_LIBRARY_PATH}:${SNAP}/lib:${SNAP}/usr/lib:${SNAP}/lib/${SNAPCRAFT_ARCH_TRIPLET}:${SNAP}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}
    PATH: ${SNAP}/usr/sbin:${SNAP}/usr/bin:${SNAP}/sbin:${SNAP}/bin:${PATH}

apps:
  iotedge:
    command: usr/bin/iotedge
    environment:
      IOTEDGE_HOST: unix://$SNAP_COMMON/run/mgmt.sock
    plugs:
      - docker-cli
      - docker
      - docker-support
      - docker-support-privileged
      - hardware-observe
      - home
      - mount-observe
      - network
      - network-bind
      - system-observe

  iotedged:
    command: usr/bin/iotedged
    command-chain:
      - bin/iotedged-wrapper.sh
    daemon: simple
    after:
      - dockerd
    plugs:
      - docker-cli
      - docker
      - docker-support
      - docker-support-privileged
      - hardware-observe
      - home
      - mount-observe
      - network
      - network-bind
      - network-observe
      - network-control
      - system-observe
      - timezone-control
      - timeserver-control
      - time-control
      - tpm
    sockets:
      workload:
        listen-stream: $SNAP_COMMON/run/workload.sock
        socket-mode: 0666
      mgmt:
        listen-stream: $SNAP_COMMON/run/mgmt.sock
        socket-mode: 0666

  docker:
    command: bin/docker
    environment:
      GIT_TEMPLATE_DIR: $SNAP/share/git-core/templates
      GIT_CONFIG_NOSYSTEM: 'true'
      GIT_EXEC_PATH: $SNAP/libexec/git-core
      GIT_TEXTDOMAINDIR: $SNAP/usr/share/locale
    completer: bin/docker-completion.sh
    plugs:
      - docker-cli
      - network
      - home
      - removable-media

  dockerd:
    command: bin/dockerd
    command-chain:
      - bin/dockerd-wrapper.sh
    daemon: simple
    plugs:
      - bluetooth-control
      - bluez
      - camera
      - docker-support
      - docker-support-privileged
      - dvb
      - firewall-control
      - gpio
      - gpio-memory-control
      - hardware-random-control
      - home
      - i2c
      - iio
      - joystick
      - network
      - network-bind
      - network-control
      - opengl
      - optical-drive
      - process-control
      - raw-usb
      - removable-media
      - serial-port
      - spi
      - system-observe
      - hardware-observe
      - timezone-control
      - timeserver-control
      - time-control
      - login-session-observe
    slots:
      - docker-daemon

parts:
  iotedge:
    plugin: dump
    after:
      - libiothsm
    source:
      - on amd64: https://github.com/Azure/azure-iotedge/releases/download/1.1.0/iotedge_1.1.0-1_ubuntu18.04_amd64.deb
      - on armhf: https://github.com/Azure/azure-iotedge/releases/download/1.1.0/iotedge_1.1.0-1_ubuntu18.04_armhf.deb
      - on arm64: https://github.com/Azure/azure-iotedge/releases/download/1.1.0/iotedge_1.1.0-1_ubuntu18.04_arm64.deb
    stage-packages:
      - libgcc1
    override-build: |
      snapcraftctl build
      # also make a lib{ssl,crypto}.so.1.0.2 symlink, as the iotedged binary has this
      # in its lib requirements
      # but the ubuntu archive packages only ship lib{ssl,crypto}.so.1.0.0
      # TODO: use the proper "target arch" env var this so could reasonably
      # still be cross-compiled
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}
      ln -f -s libcrypto.so.1.0.0 \
            ${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/libcrypto.so.1.0.2
      ln -f -s libssl.so.1.0.0 \
            ${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/libssl.so.1.0.2
      version=$(${SNAPCRAFT_PART_INSTALL}/usr/bin/iotedge version | awk '{print $2}')
      snapcraftctl set-version ${version}

  libiothsm:
    plugin: dump
    source:
      - on amd64: https://github.com/Azure/azure-iotedge/releases/download/1.1.0/libiothsm-std_1.1.0-1_ubuntu18.04_amd64.deb
      - on armhf: https://github.com/Azure/azure-iotedge/releases/download/1.1.0/libiothsm-std_1.1.0-1_ubuntu18.04_armhf.deb
      - on arm64: https://github.com/Azure/azure-iotedge/releases/download/1.1.0/libiothsm-std_1.1.0-1_ubuntu18.04_arm64.deb

  wrapper-scripts:
    plugin: dump
    source: local-assets
    stage-packages:
      - mount
      - jq

  docker-cli:
    plugin: make
    build-snaps: ['go/1.13/stable']
    source: https://github.com/docker/cli.git
    source-tag: v19.03.13
    override-build: |
      # docker build specific environment variables
      export VERSION=$(git describe --tags  | cut -c 2-)
      export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
      export GITCOMMIT=$DOCKER_GITCOMMIT
      export DISABLE_WARN_OUTSIDE_CONTAINER=1

      # setup the go build environment for docker-cli
      . ${SNAPCRAFT_PROJECT_DIR}/go-build-helper.sh
      gopartbootstrap github.com/docker/cli

      # build the docker cli binary
      cd $GOPATH/src/github.com/docker/cli
      unset LDFLAGS
      make dynbinary

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T "$GOPATH/src/github.com/docker/cli/build/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker"
      install -T "$GOPATH/src/github.com/docker/cli/contrib/completion/bash/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker-completion.sh"

  moby:
    plugin: make
    # docker's engine repo is a fork of github.com/moby/moby that helpfully
    # has tags that correspond to docker-ce
    source: https://github.com/moby/moby.git
    source-tag: v19.03.13
    source-depth: 1
    override-pull: |
      snapcraftctl pull
      git apply \
          --ignore-space-change \
          --ignore-whitespace \
          ${SNAPCRAFT_PROJECT_DIR}/dockerd-patches/*.patch
    override-build: |
      # docker build specific environment variables
      export VERSION=$(git describe --tags  | cut -c 2-)
      export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
      export GITCOMMIT=$DOCKER_GITCOMMIT
      export DISABLE_WARN_OUTSIDE_CONTAINER=1
      export BUILDTIME="$(date --rfc-3339 ns 2>/dev/null | sed -e 's/ /T/' || date -u)"
      export DOCKER_BUILDTAGS=' \
        apparmor \
        seccomp \
        selinux \
      '
      #	pkcs11
      export AUTO_GOPATH=1

      # setup the go build environment for docker/docker
      . ${SNAPCRAFT_PROJECT_DIR}/go-build-helper.sh
      gopartbootstrap github.com/docker/docker

      # build the dockerd binary
      ./hack/make.sh dynbinary

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T "$GOPATH/src/github.com/docker/docker/bundles/dynbinary-daemon/dockerd" "$SNAPCRAFT_PART_INSTALL/bin/dockerd"
    # https://github.com/docker/engine/blob/v19.03.11/Dockerfile.simple (Docker-supported Go version for Engine)
    build-snaps: ['go/1.13/stable']
    stage-packages:
      - zfsutils-linux
      - aufs-tools
      - libltdl7

  # this part is so that things like `docker build -t foobar github.com/foo/bar` work
  git:
    source: https://github.com/git/git.git
    source-type: git
    source-tag: v2.26.2
    source-depth: 1
    plugin: autotools
    configflags:
      - --with-curl
      - --with-expat
    stage-packages:
      - gettext
      - libcurl3
      - libcurl4-openssl-dev

  containerd:
    plugin: make
    source: https://github.com/containerd/containerd.git
    # from : https://github.com/docker/docker-ce/blob/v19.03.11/components/engine/hack/dockerfile/install/containerd.installer
    # source-commit: 7ad184331fa3e55e52b890ea95e65ba581ae3429
    # version aligned with Azure own releases
    source-tag: v1.3.7
    override-build: |
      # setup the go build environment for containerd
      . ${SNAPCRAFT_PROJECT_DIR}/go-build-helper.sh
      gopartbootstrap github.com/containerd/containerd

      make GIT_COMMIT= GIT_BRANCH= LDFLAGS=

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T bin/containerd "$SNAPCRAFT_PART_INSTALL/bin/containerd"
      install -T bin/containerd-shim "$SNAPCRAFT_PART_INSTALL/bin/containerd-shim"
      install -T bin/ctr "$SNAPCRAFT_PART_INSTALL/bin/ctr"
    build-snaps: ['go/1.13/stable']

  runc:
    plugin: make
    source: https://github.com/opencontainers/runc.git
    # from https://github.com/docker/docker-ce/blob/v19.03.11/components/engine/hack/dockerfile/install/runc.installer
    # source-commit: dc9208a3303feef5b3839f4323d9beb36df0a9dd
    # version aligned with Azure own releases
    source-tag: v1.0.0-rc92
    override-build: |
      # setup the go build environment for runc
      . ${SNAPCRAFT_PROJECT_DIR}/go-build-helper.sh
      gopartbootstrap github.com/opencontainers/runc

      make BUILDTAGS='seccomp apparmor selinux' COMMIT=

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T runc "$SNAPCRAFT_PART_INSTALL/bin/runc"
    build-snaps: ['go/1.13/stable']

  libnetwork:
    plugin: make
    source: https://github.com/docker/libnetwork.git
    # from https://github.com/docker/docker-ce/blob/v19.03.11/components/engine/hack/dockerfile/install/proxy.installer
    source-commit: 153d0769a1181bf591a9637fd487a541ec7db1e6
    override-build: |
      # setup the go build environment for libnetwork
      . ${SNAPCRAFT_PROJECT_DIR}/go-build-helper.sh
      gopartbootstrap github.com/docker/libnetwork

      make build-local

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T bin/docker-proxy "$SNAPCRAFT_PART_INSTALL/bin/docker-proxy"
      install -T bin/dnet "$SNAPCRAFT_PART_INSTALL/bin/dnet"
    build-snaps: ['go/1.13/stable']

  tini:
    plugin: cmake
    source: https://github.com/krallin/tini.git
    source-type: git
    # from https://github.com/docker/docker-ce/blob/v19.03.11/components/engine/hack/dockerfile/install/tini.installer
    source-commit: fec3683b971d9c3ef73f284f176672c44b448662
    organize:
      'bin/tini-static': bin/docker-init
    prime:
      - -bin/tini

  yq:
    plugin: go
    go-channel: 1.14/stable
    source: https://github.com/mikefarah/yq.git
    source-type: git
    go-importpath: github.com/mikefarah/yq
    override-pull: |
      snapcraftctl pull
      # use latest tag, this should represent last stable release
      git checkout $(git describe --abbrev=0 --tags)

build-packages:
  - build-essential
  - btrfs-tools
  - gcc
  - libc6-dev
  - libdevmapper-dev
  - libltdl-dev
  - patch
  - git
  - pkg-config
  - gettext
  - libssl-dev
  - libexpat1-dev
  - libapparmor-dev
  - libseccomp-dev
  - make
  - iptables
  - zlib1g-dev
